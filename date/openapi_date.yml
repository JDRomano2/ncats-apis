openapi: '3.0.0'
info:
  version: '1.0'
  title: DATE API
  description: >-
    Web API to query DATE data stored in MySQL. Primary features are
    MySQL-like syntax for filtering database table rows and the ability
    to perform JOINs remotely.
  contact:
    name: Joseph D. Romano
    x-role: API developer
    email: jdr2160@cumc.columbia.edu
    x-id: 'https://github.com/JDRomano2'
  termsOfService: https://github.com/JDRomano2/ncats-apis/blob/master/date/terms.md
servers:
  - url: 'http://date.nsides.io'
    description: 'Production server'
tags:
  - name: translator
paths:
  '/api/{tablename}':
    get:
      summary: 'Prints contents of {tablename} by row'
      responses:
        '200':
          description: >-
            JSON-formatted list where each element is a JSON object where keys
            are table columns and values are the corresponding cell values.
            Users can pass parameters with a MySQL-like syntax to perform
            filtering within the table.
      parameters:
        - name: tablename
          in: path
          required: true
          description: >-
            One of the table names documented at http://date.nsides.io, or liste
            in the response to '/api/tables'.
          schema:
            type: string
        - name: _fields
          in: query
          description: >-
            One or more table columns to include in the query's response. If
            omitted, all table columns will be returned in the response.
          required: false
          schema:
            type: string
        - name: _where
          in: query
          description: >-
            One or more tuples delimited by logical operators, where each tuple
            is a comparison applied to a specific table column. Follows syntax
            specifications described at https://github.com/o1lab/xmysql#row-filtering--where
          required: false
          schema:
            type: string
  '/api/{tablename}/{id}':
    get:
      summary: 'Fetches a single row from {tablename} by primary key {id}'
      responses:
        '200':
          description: >-
            If {id} is a valid primary key, the response is a JSON array of
            length 1, consisting of a JSON object representation of the row with
            the matching primary key.
      parameters:
        - name: tablename
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
  '/api/tables':
    get:
      summary: 'Lists all available tables (i.e., valid values for {tablename})'
      responses:
        '200':
          description: >-
            JSON-formatted list of table names
